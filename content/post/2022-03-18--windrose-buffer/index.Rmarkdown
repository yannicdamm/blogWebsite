---
title: Creating wedge and windrose buffers in R
author: 'Yannic Rud√° Damm'
date: '2022-03-18'
slug: windrose-buffer
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2022-03-18T18:18:59+01:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

# Creating Wedge and Windrose Buffers in R

For one of my research projects I was using geographically explicit data. Each entry in my database basically contained longitude and latitude variables referencing to point locations on the earth's surface. One idea I had during the research project was to count the amount of points "downwind" from another point location. After a quick search on the internet I found QGIS' wedge buffer function, which looked like what I wanted to do. However, QGIS is a different type of software explicitly created to handle geographic information system (GIS) data (hence its name) and outside of my typical R workflow. This meant I would have to export my data from R to QGIS, do the geographic analysis there and then export that data back again to R. This was a problem for me because I like to automate as many steps possible of my analysis and workflow, ideally from the import of the original raw data source to the final paper creation. This allows me to easily rerun all the steps of my analysis without having to manually keep track of any exceptions. Although R  is able to handle GIS data as well and many packages for that purpose exist, I was not able to find a similar kind of wedge buffer function in R. So I decided to create my own.

First of all, let's have a look at how a wedge buffer looks like in QGIS: 
image: ![](qgisWedgeBuffer.png)

As you can see, it basically looks like a slice of pizza. Or more precisely, it looks like a isosceles triangle with two equally length lines emerging from a point at the tip of the acute angle and a rounded line connecting them. 


```{r echo=FALSE}
library(ggplot2)

x = seq(-1, 1, .01)
y = sin(x^3)/(1 + x^6)

ggplot(mapping = aes(x = x, 
                     y = y)) +
geom_line() +
geom_ribbon(aes(ymin = 0, 
                ymax = y), 
            fill = "pink", 
            alpha = 0.5) +
theme_void() 
```